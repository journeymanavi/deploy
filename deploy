#!/bin/bash

# Stop execution as soon as there is any error
set -e

function usage {
  cat <<EOF

Usage: deploy [mode-option] <arguments>

Deployment is done relative to the present working directory.

Mode Options:
  -d                          deploy   : Perform fresh deployment (default)
  -s                          setup    : Perform one-time setup
  -b                          rollback : Rolls back to previous deployment

Arguments:
  ** Required for all modes **
  -n <app-name>               App name

  ** Reuqired only for 'setup' mode **
  -a <app-main-script>        Name of the entry point script of the app
  -e <file/"name val">        The environment variables to be set for the app
                              
                              The argument can either be a file containing all 
                              environment variables (format: name=val, one 
                              per line)
                              or
                              one or more instances of -e can be used to set
                              individual env variables (format: name=val)
  -u <github-user>            GitHub user
  -r <github-repo>            GithUb repo

  ** Required only for 'deploy' mode **    
  -t <github-tag>             GitHub tag to be deployed

EOF
}

function validate_required_arg {
  if [[ -z $1 ]]; then
    echo $2
    usage
    exit 1
  fi  
}

# Function to process environment to be used for running application process
#
# This function uses a bash idiom to read and process file input line-by-line
#
#     while IFS= read -r line; do
#       # do something with $line
#     done < $FILENAME
#
#     while IFS= read -r line; do
#       # do something with $line
#     done <<< "$VARIABLE"
#
# here
# IFS            : is a special shell variable that sets the "Internal Field Separator"
#                  this then controls the behavior of many shell built in operation that
#                  perform string splitting etc. based on this variable (e.g. read)
#                  In this case setting it to nothing is equal to 'unsetting' it
#                  i.e. string splitting is effectively disabled
# read -r        : -r makes read ignore \ escaped characters (e.g. \n)
# < <filename>   : <filename> id opened for reading and contents redirected to STDIN
#
# This function uses bash Arrays (does not anymore but this comment left for reference)
# arr=($var)     : Array assignment. Here the value of $var will undergo 
#                  Word Splitting using $IFS and the resulting values will be 
#                  set in the array as items
# ${arr[i]}      : Accessing array elements
function process_env {
  if [[ -r $1 ]]; then
    while read -r line; do
      process_env "${line}"
    done < $1
  else
    IFS='=' read name val <<<$1 # a quick way to split delimited name val pair
    if [[ -z "${name}" ]] || [[ -z "${val}" ]]; then
      echo "ERROR: Invalid environment argument: $1"
      usage
      exit 1
    fi
    if [[ -n $APP_ENV ]]; then
      APP_ENV="${APP_ENV},"
    fi
    APP_ENV="${APP_ENV}\"${name}\":\"${val}\""
  fi
}

# Initialize variables to receive command line arguments
MODE="deploy" #default
APP_NAME=""
GITHUB_USER=""
GITHUB_REPO=""
GITHUB_TAG=""
APP_ENV="\"NODE_ENV\":\"production\""
TMP_DIR="./tmp"

# process command line argument
while getopts ":dsbn:a:e:u:r:t:" opt; do 
  case $opt in
    d)
      MODE="deploy"
    ;;
    s)
      MODE="setup"
    ;;
    b)
      MODE="rollback"
    ;;
    n)
      APP_NAME=$OPTARG
    ;;
    a)
      APP_SCRIPT=$OPTARG
    ;;
    e)
      process_env $OPTARG
    ;;
    u)
      GITHUB_USER=$OPTARG
    ;;
    r)
      GITHUB_REPO=$OPTARG
    ;;
    t)
      GITHUB_TAG=$OPTARG
    ;;
    \?)
      echo "Invalid option: -$OPTARG";
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument"
    ;;
  esac
done


#### main ####
validate_required_arg "$APP_NAME" "ERROR: App name not specified"

BASE_DIR="$(pwd)/${APP_NAME}"
PM2_PROC_FILE="${BASE_DIR}/pm2-procfile.json"
DEPLOY_CONFIG_FILE="${BASE_DIR}/deploy.conf"
RELEASES_DIR="${BASE_DIR}/releases"
LOG_DIR="${BASE_DIR}/logs"

echo "Running ${MODE} for application: ${APP_NAME} from ${BASE_DIR}"

if [[ $MODE = 'setup' ]]; then
  validate_required_arg "$APP_SCRIPT" "ERROR: Application script not specified"
  validate_required_arg "$GITHUB_USER" "ERROR: GitHub user not specified"
  validate_required_arg "$GITHUB_REPO" "ERROR: GitHub repo not specified"

  if [[ ! -d "${RELEASES_DIR}" ]]; then
    echo "making releases directory ${RELEASES_DIR}"
    mkdir -p "${RELEASES_DIR}"
  fi

  if [[ ! -d "${LOG_DIR}" ]]; then
    echo "making logs directory ${LOG_DIR}"
    mkdir -p "${LOG_DIR}"
  fi

  OUT_LOG_FILE="${LOG_DIR}/${APP_NAME}-out.log"
  ERR_LOG_FILE="${LOG_DIR}/${APP_NAME}-err.log"
  PID_FILE="${LOG_DIR}/${APP_NAME}-pm2.pid"

  echo "writing PM2 procfile ${PM2_PROC_FILE}" 
  cat <<EOF > "${PM2_PROC_FILE}"
{
  "apps" : [
    {
      "name"            : "${APP_NAME}",
      "cwd"             : "${BASE_DIR}/current",
      "script"          : "${APP_SCRIPT}",

      "log_date_format" : “YYYY-MM-DD HH:mm:ss.SSS Z”,
      "log_type"        : "json"
      "error_file"      : "${ERR_LOG_FILE}",
      "out_file"        : "${OUT_LOG_FILE}",
      "pid_file"        : "${PID_FILE}",

      "env": {
        ${APP_ENV}
      }
    }
  ]
}
EOF

  echo "saving deploy configuration to ${DEPLOY_CONFIG_FILE}"
  echo "GITHUB_USER|"${GITHUB_USER} >  "${DEPLOY_CONFIG_FILE}"
  echo "GITHUB_REPO|"${GITHUB_REPO} >> "${DEPLOY_CONFIG_FILE}"

  echo "Application ${APP_NAME} suuccessfully set up for deployment."
fi

if [[ $MODE = 'deploy' ]]; then
  validate_required_arg "$GITHUB_TAG" "ERROR: GitHub tag not specified"
  echo "Deploying tag : ${GITHUB_TAG}"
  
  # read config from file (show error if absent)
  echo "reading deployment configuration from ${DEPLOY_CONFIG_FILE}"
  if [[ -r "${DEPLOY_CONFIG_FILE}" ]]; then
    GITHUB_USER=$(grep 'GITHUB_USER' "${DEPLOY_CONFIG_FILE}" | cut -d "|" -f2)
    if [[ -z "${GITHUB_USER}" ]]; then
      echo "ERROR: Failed to load config: GITHUB_USER"
      exit 1
    else
      echo "GITHUB_USER : ${GITHUB_USER}"
    fi

    GITHUB_REPO=$(grep 'GITHUB_REPO' "${DEPLOY_CONFIG_FILE}" | cut -d "|" -f2)
    if [[ -z "${GITHUB_REPO}" ]]; then
      echo "ERROR: Failed to load config: GITHUB_REPO"
      exit 1
    else
      echo "GITHUB_USER : ${GITHUB_REPO}"
    fi
  else
    echo "ERROR: Expected deployment configuration file ${DEPLOY_CONFIG_FILE} not found or not readable"
    exit 1
  fi

  # Fetch deployment artifacts
  if [[ ! -d "${TMP_DIR}" ]]; then
    mkdir "$TMP_DIR"
  fi
  RELEASE_PACKAGE="${GITHUB_REPO}-${GITHUB_TAG}.tar.gz"
  ARTIFACT_URL="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/releases/download/${GITHUB_TAG}/${RELEASE_PACKAGE}"
  SAVED_RELEASE_PACKAGE="${TMP_DIR}/${RELEASE_PACKAGE}"
  # LATEST_URL           ="https://github.com/journeymanavi/apartment-uncomplex-api/releases/latest"
  # REDIRECTED_LATEST_URL="https://github.com/journeymanavi/apartment-uncomplex-api/releases/tag/v0.0.2"
  echo "downloading deployment artifact from: ${ARTIFACT_URL}"
  echo "saving to ${SAVED_RELEASE_PACKAGE}"
  if [[ ! -z $(curl -IsL "${ARTIFACT_URL}" | grep '404 Not Found') ]]; then
    echo "ERROR: Deployment artifact not found at above URL"
    exit 1
  else
    curl -sL "${ARTIFACT_URL}" -o "${SAVED_RELEASE_PACKAGE}"
  fi

  # Extract the fetched artifacts
  APP_DEPLOY_DIR="${RELEASES_DIR}/${GITHUB_TAG}"
  echo "extracting release package ${SAVED_RELEASE_PACKAGE} to ${APP_DEPLOY_DIR}"
  if [[ -d "${APP_DEPLOY_DIR}" ]]; then
    rm -fr "${APP_DEPLOY_DIR}/*"
  else
    mkdir "${APP_DEPLOY_DIR}"
  fi
  tar -xf "${SAVED_RELEASE_PACKAGE}" -C "${APP_DEPLOY_DIR}"

  # Install app dependencies
  echo "installing application dependencies"
  cd "${APP_DEPLOY_DIR}"
  yarn install --prod -s

  # Run backups as needed

  # Bring the application down
  # pm2 stop "${APP_NAME}"

  # Run any supporting deployment scripts

  # Switch symlinks
  echo "switching current application to new deployment: ${APP_DEPLOY_DIR}"
  cd "${BASE_DIR}"
  rm -fr current
  ln -s "${APP_DEPLOY_DIR}" current

  # Bring application back up
  # pm2 start "${PM2_PROC_FILE}" --update-env

  #Check app up

  #Write to deployment log
  echo "$(date "+%Y-%m-%d %H:%M:%S"): Successfull deployment of ${APP_NAME}\
 release ${GITHUB_TAG} by user $(whoami)" | tee -a "${LOG_DIR}/revision.log"
fi

if [[ $MODE = 'rollback' ]]; then
  echo "rollback not imlemented yet"
fi

# Housekeep and exit
cd "${BASE_DIR}/.."
rm -fr $TMP_DIR
exit 0