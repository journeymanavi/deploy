#!/bin/bash

# Stop secution as soon as there is any error
set -e

function usage {
  cat <<EOF

  Usage: deploy <options> <mode>

  Options:
    -u <github-user>            The GitHub user
    -r <github-repo>            The GithUb repo
    -t <github-tag>             The GitHub tag to be deployed
    -p <pm2-app>                The PM2 app name
    -e <file/"name val">        The environment variables to be set for PM2.
                                This can either specify a file containing all 
                                environment variables (format: name val\n) or
                                multiple instances of -e can be used to set 
                                individual env variables

  Modes:
    -m deploy|rollback          deploy (default): Performs fresh deployment
                                rollback: Rollsback to previous deployment

EOF
}

PM2_ENV=""
function process_env {
  arg = $1
  if [[ -f $1 ]]; then
    
  else

    PM2_ENV=$PM2_ENV
  fi
}

MODE="deploy"
# process commandline argument
while getopts ":u:r:t:p:m:" opt; do 
  case $opt in
    u)
      GITHUB_USER=$OPTARG
    ;;
    r)
      GITHUB_REPO=$OPTARG
    ;;
    t)
      GITHUB_TAG=$OPTARG
    ;;
    p)
      PM2_APP_NAME=$OPTARG
    ;;
    m)
      MODE=$OPTARG
    ;;
    e)
      process_env $OPTARG
    ;;
    \?)
      echo "Invalid option: -$OPTARG";
      exit 1
    ;;
    :)
      echo "Option -$OPTARG requires an argument"
    ;;
  esac
done

if [[ -z $GITHUB_USER ]]; then
  echo "ERROR: GitHub user not specified"
  usage
  exit 1
fi

if [[ -z $GITHUB_REPO ]]; then
  echo "ERROR: GitHub repo not specified"
  usage
  exit 1
fi

if [[ -z $GITHUB_TAG ]]; then
  echo "ERROR: GitHub tag not specified"
  usage
  exit 1
fi

if [[ -z $PM2_APP_NAME ]]; then
  echo "ERROR: PM2 process-name not specified"
  usage
  exit 1
fi

if [ $MODE != 'deploy' ] && [$MODE != 'rollback']; then
  echo "ERROR: GitHub user not specified"
  usage
  exit 1
fi

# LATEST_URL="https://github.com/journeymanavi/apartment-uncomplex-api/releases/latest"
# REDIRECTED_LATEST_URL="https://github.com/journeymanavi/apartment-uncomplex-api/releases/tag/v0.0.2"
DEPLOY_DIR=${GITHUB_REPO}-${GITHUB_TAG}
DEPLOY_FILE=${DEPLOY_DIR}.tar.gz
ARTIFACT_URL="https://github.com/${GITHUB_USER}/${GITHUB_REPO}/releases/download/${GITHUB_TAG}/${DEPLOY_FILE}"

echo "GITHUB_USER:      "${GITHUB_USER}
echo "GITHUB_REPO:      "${GITHUB_REPO}
echo "GITHUB_TAG:       "${GITHUB_TAG}
echo "PM2_APP_NAME:     "${PM2_APP_NAME}
echo "PM2_ECOSYSTEM:    "${PM2_APP_NAME}
echo "DEPLOY_DIR:       "${DEPLOY_DIR}
echo "DEPLOY_FILE:      "${DEPLOY_FILE}
echo "ARTIFACT_URL:     "${ARTIFACT_URL}

# Print commands before executing
set -x

# Create directories as needed
if [[ ! -d $PM2_APP_NAME ]]; then
  mkdir $PM2_APP_NAME
else
  rm -fr $PM2_APP_NAME/$DEPLOY_DIR
  mkdir $DEPLOY_DIR
fi

exit 1

# Fetch deployment artefacts
curl -sL $ARTIFACT_URL -o $PM2_APP_NAME/${DEPLOY_DIR}/${DEPLOY_FILE}

# Extract the fetched artefacts
tar -xf $DEPLOY_DIR/$DEPLOY_FILE -C $DEPLOY_DIR
rm -f $DEPLOY_DIR/$DEPLOY_FILE

# Install app dependencies
cd $DEPLOY_DIR
yarn install
cd ..

# Run backups as needed

# Bring the application down
# pm2 stop $PM2_APP_NAME

# Run any supporting deployment scripts

# Switch symlinks
ln -s $DEPLOY_DIR current

# Bring application back up
# pm2 start $PM2_APP_NAME

# Housekeep